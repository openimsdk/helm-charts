#The global Prometheus monitoring switch. If set to true, all openim_servers ServiceMonitor will be created for each service.
#If set to false, openim_servers ServiceMonitor will not be created, and the monitoring function of the service will not be available
global:
  monitor:
    enabled: false
  sharedValues:
    msggatewayReplicaCount: 1
config:
  envs:
    discovery: k8s
  zookeeper:
    schema: openim
    address: [ 172.28.0.1:12181 ]
    username: ''
    password: ''

  ###################### Mongo ######################
  # MongoDB configuration

  # If uri is not empty, it will be used directly for the MongoDB connection.
  # This is a complete MongoDB URI string.
  # Example: mongodb://user:password@host1:port1,host2:port2/dbname?options
  mongo:
    uri: ''

  # List of MongoDB server addresses.
  # Used for constructing the MongoDB URI if 'uri' above is empty.
  # For a standalone setup, specify the address of the single server.
  # For a sharded cluster, specify the addresses of the Mongos servers.
  # Example: [ '172.28.0.1:37017', '172.28.0.2:37017' ]
  # Default MongoDB database name
  # Maximum connection pool size
    address: [ im-mongodb:27017 ]
    database: openim_v3
    username: openIM
    password: openIM123
    maxPoolSize: 100

  ###################### Redis configuration information ######################
  # Redis configuration
  #
  # Username is required only for Redis version 6.0+
  redis:
    address: [ im-redis-master:6379 ]
    username: ''
    password: openIM123

  ###################### Kafka configuration information ######################
  # Kafka configuration
  #
  # Kafka username
  # Kafka password
  # It's not recommended to modify this topic name
  # Consumer group ID, it's not recommended to modify
  kafka:
    username: 'root'
    password: 'proot'
    addr: [ im-kafka:9092 ]
    latestMsgToRedis:
      topic: "latestMsgToRedis"
    offlineMsgToMongo:
      topic: "offlineMsgToMongoMysql"
    msgToPush:
      topic: "msgToPush"
    consumerGroupID:
      msgToRedis: redis
      msgToMongo: mongo
      msgToMySql: mysql
      msgToPush: push

  ###################### RPC configuration information ######################
  # RPC configuration
  #
  # IP address to register with zookeeper when starting RPC, the IP and corresponding rpcPort should be accessible by api/gateway
  # Default listen IP is 0.0.0.0
  rpc:
    registerIP: ''
    listenIP: 0.0.0.0

  ###################### API configuration information ######################
  # API configuration
  #
  # API service port
  # Default listen IP is 0.0.0.0
  api:
    openImApiPort: [ 80 ]
    listenIP: 0.0.0.0

  ###################### Object configuration information ######################
  # Object storage configuration
  #
  # Use minio for object storage
  # API URL should be accessible by the app
  # It's not recommended to modify the bucket name
  # Endpoint should be accessible by the app
  # Session token
  # Configuration for Tencent COS
  # Configuration for Aliyun OSS
  # apiURL is the address of the api, the access address of the app, use s3 must be configured
  # minio.endpoint can be configured as an intranet address,
  # minio.signEndpoint is minio public network address
  object:
    enable: "minio"
    apiURL: "https://openim1.server.top/api"
    minio:
      bucket: "openim"
      endpoint: "http://im-minio:9000"
      accessKeyID: "root"
      secretAccessKey: "openIM123"
      sessionToken: ''
      signEndpoint: "https://openim1.server.top/im-minio-api"
      publicRead: false
    cos:
      bucketURL: https://temp-1252357374.cos.ap-chengdu.myqcloud.com
      secretID: ''
      secretKey: ''
      sessionToken: ''
      publicRead: false
    oss:
      endpoint: "https://oss-cn-chengdu.aliyuncs.com"
      bucket: "demo-9999999"
      bucketURL: "https://demo-9999999.oss-cn-chengdu.aliyuncs.com"
      accessKeyID: ''
      accessKeySecret: ''
      sessionToken: ''
      publicRead: false
    kodo:
      endpoint: "http://s3.cn-east-1.qiniucs.com"
      bucket: "demo-9999999"
      bucketURL: "http://your.domain.com"
      accessKeyID: ''
      accessKeySecret: ''
      sessionToken: ''
      publicRead: false
    aws:
      endpoint: "''" # This might not be necessary unless you're using a custom endpoint
      region: "us-east-1"
      bucket: "demo-9999999"
      accessKeyID: ''
      accessKeySecret: ''
      publicRead: false

  ###################### RPC Port Configuration ######################
  # RPC service ports
  # These ports are passed into the program by the script and are not recommended to modify
  # For launching multiple programs, just fill in multiple ports separated by commas
  # For example, [10110, 10111]
  rpcPort:
    openImUserPort: [ 80 ]
    openImFriendPort: [ 80 ]
    openImMessagePort: [ 80 ]
    openImMessageGatewayPort: [ 88 ] # This port is used for long connection
    openImGroupPort: [ 80 ]
    openImAuthPort: [ 80 ]
    openImPushPort: [ 80 ]
    openImConversationPort: [ 80 ]
    openImThirdPort: [ 80 ]

  ###################### RPC Register Name Configuration ######################
  # RPC service names for registration, it's not recommended to modify these
  rpcRegisterName:
    openImUserName: openimserver-openim-rpc-user:80
    openImFriendName: openimserver-openim-rpc-friend:80
    openImMsgName: openimserver-openim-rpc-msg:80
    openImPushName: openimserver-openim-push:80
    openImMessageGatewayName: openimserver-openim-msggateway:88
    openImGroupName: openimserver-openim-rpc-group:80
    openImAuthName: openimserver-openim-rpc-auth:80
    openImConversationName: openimserver-openim-rpc-conversation:80
    openImThirdName: openimserver-openim-rpc-third:80

  ###################### Log Configuration ######################
  # Log configuration
  #
  # Storage directory
  # Log rotation time
  # Maximum number of logs to retain
  # Log level, 6 means all levels
  # Whether to output to stdout
  # Whether to output in json format
  # Whether to include stack trace in logs
  log:
    storageLocation: ../logs/
    rotationTime: 24
    remainRotationCount: 2
    remainLogLevel: 6
    isStdout: true
    isJson: false
    withStack: false

  ###################### Variables definition ######################
  # Long connection server configuration
  #
  # Websocket port for msg_gateway
  # Maximum number of websocket connections
  # Maximum length of websocket request package
  # Websocket connection handshake timeout
  longConnSvr:
    openImWsPort: [ 80 ]
    openImMessageGatewayPort: [ 88 ]
    websocketMaxConnNum: 100000
    websocketMaxMsgLen: 4096
    websocketTimeout: 10

  # Push notification service configuration
  #
  # Use GeTui for push notifications
  # GeTui offline push configuration
  # FCM offline push configuration
  # Account file, place it in the config directory
  # JPush configuration, modify these after applying in JPush backend
  push:
    enable: getui
    geTui:
      pushUrl: "https://restapi.getui.com/v2/$appId"
      masterSecret: ""
      appKey: ""
      intent: ""
      channelID: ""
      channelName: ""
    fcm:
      serviceAccount: "x.json"
    jpns:
      appKey:
      masterSecret:
      pushUrl:
      pushIntent:

  # App manager configuration
  #
  # Built-in app manager user IDs
  # Built-in app manager nicknames
  manager:
    userID:
    nickname:

  im-admin:
    userID: [ "imAdmin" ]
    nickname: [ "imAdmin" ]

  # Multi-platform login policy
  # For each platform(Android, iOS, Windows, Mac, web), only one can be online at a time
  multiLoginPolicy: 1

  # Whether to store messages in MySQL, messages in MySQL are only used for management background
  chatPersistenceMysql: true

  # Message cache timeout in seconds, it's not recommended to modify
  msgCacheTimeout: 86400

  # Whether to enable read receipts for group chat
  groupMessageHasReadReceiptEnable: true

  # Whether to enable read receipts for single chat
  singleMessageHasReadReceiptEnable: true

  # MongoDB offline message retention period in days
  retainChatRecords: 365

  # Schedule to clear expired messages(older than retainChatRecords days) in MongoDB every Wednesday at 2am
  # This deletion is just for cleaning up disk usage according to previous configuration retainChatRecords, no notification will be sent
  chatRecordsClearTime: "0 2 * * 3"

  # Schedule to auto delete messages every day at 2am
  # This deletion is for messages that have been retained for more than msg_destruct_time (seconds) in the conversation field
  msgDestructTime: "0 2 * * *"

  # Secret key
  secret: openIM123

  # Token policy
  #
  # Token expiration period in days
  tokenPolicy:
    expire: 90

  # Message verification policy
  #
  # Whether to verify friendship when sending messages
  messageVerify:
    friendVerify: false

  # iOS push notification configuration
  #
  # iOS push notification sound
  # Whether to count badge
  # Whether it's production environment
  iosPush:
    pushSound: "xxx"
    badgeCount: true
    production: false

  ###################### Third-party service configuration ######################
  # Callback configuration
  #
  # Callback URL
  # Whether to enable this callback event
  # Timeout in seconds
  # Whether to continue execution if callback fails
  callback:
    url:
    beforeSendSingleMsg:
      enable: false
      timeout: 5
      failedContinue: true
    beforeUpdateUserInfoEx:
      enable:  false
      timeout: 5
      failedContinue: true
    afterUpdateUserInfoEx:
      enable:  false
      timeout: 5
      failedContinue: true
    afterSendSingleMsg:
      enable: false
      timeout: 5
      failedContinue: true
    beforeSendGroupMsg:
      enable: false
      timeout: 5
      failedContinue: true
    afterSendGroupMsg:
      enable: false
      timeout: 5
      failedContinue: true
    msgModify:
      enable: false
      timeout: 5
      failedContinue: true
    userOnline:
      enable: false
      timeout: 5
      failedContinue: true
    userOffline:
      enable: false
      timeout: 5
      failedContinue: true
    userKickOff:
      enable: false
      timeout: 5
      failedContinue: true
    offlinePush:
      enable: false
      timeout: 5
      failedContinue: true
    onlinePush:
      enable: false
      timeout: 5
      failedContinue: true
    superGroupOnlinePush:
      enable: false
      timeout: 5
      failedContinue: true
    beforeAddFriend:
      enable: false
      timeout: 5
      failedContinue: true
    beforeUpdateUserInfo:
      enable: false
      timeout: 5
      failedContinue: true
    beforeCreateGroup:
      enable: false
      timeout: 5
      failedContinue: true
    afterCreateGroup:
      enable: false
      timeout: 5
      failedContinue: true
    beforeMemberJoinGroup:
      enable: false
      timeout: 5
      failedContinue: true
    beforeSetGroupMemberInfo:
      enable: false
      timeout: 5
      failedContinue: true
    afterSetGroupMemberInfo:
      enable: false
      timeout: 5
      failedContinue: true
    setMessageReactionExtensions:
      enable: false
      timeout: 5
      failedContinue: true
    quitGroup:
      enable: false
      timeout: 5
      failedContinue: true
    killGroupMember:
      enable: false
      timeout: 5
      failedContinue: true
    dismissGroup:
      enable: false
      timeout: 5
      failedContinue: true
    joinGroup:
      enable: false
      timeout: 5
      failedContinue: true
    groupMsgRead:
      enable: false
      timeout: 5
      failedContinue: true
    singleMsgRead:
      enable: false
      timeout: 5
      failedContinue: true
    updateUserInfo:
      enable: false
      timeout: 5
      failedContinue: true
    beforeUserRegister:
      enable: false
      timeout: 5
      failedContinue: true
    afterUserRegister:
      enable: false
      timeout: 5
      failedContinue: true
    transferGroupOwner:
      enable: false
      timeout: 5
      failedContinue: true
    beforeSetFriendRemark:
      enable: false
      timeout: 5
      failedContinue: true
    afterSetFriendRemark:
      enable: false
      timeout: 5
      failedContinue: true
    afterGroupMsgRead:
      enable: false
      timeout: 5
      failedContinue: true
    afterGroupMsgRevoke:
      enable: false
      timeout: 5
      failedContinue: true
    afterJoinGroup:
      enable: false
      timeout: 5
      failedContinue: true
    beforeInviteUserToGroup:
      enable: false
      timeout: 5
      failedContinue: true
    joinGroupAfter:
      enable: false
      timeout: 5
      failedContinue: true
    setGroupInfoAfter:
      enable: false
      timeout: 5
      failedContinue: true
    setGroupInfoBefore:
      enable: false
      timeout: 5
      failedContinue: true
    revokeMsgAfter:
      enable: false
      timeout: 5
      failedContinue: true
    addBlackBefore:
      enable: false
      timeout: 5
      failedContinue: true
    addFriendAfter:
      enable: false
      timeout: 5
      failedContinue: true
    addFriendAgreeBefore:
      enable: false
      timeout: 5
      failedContinue: true
    deleteFriendAfter:
      enable: false
      timeout: 5
      failedContinue: true
    importFriendsBefore:
      enable: false
      timeout: 5
      failedContinue: true
    importFriendsAfter:
      enable: false
      timeout: 5
      failedContinue: true
    removeBlackAfter:
      enable: false
      timeout: 5
      failedContinue: true

  ###################### Prometheus ######################
  # Prometheus configuration for various services
  # The number of Prometheus ports per service needs to correspond to rpcPort
  # The number of ports needs to be consistent with msg_transfer_service_num in script/path_info.sh
  prometheus:
    enable: true
    grafanaUrl: "https://openim2.server.top/"
    apiPrometheusPort: [ 90 ]
    userPrometheusPort: [ 90 ]
    friendPrometheusPort: [ 90 ]
    messagePrometheusPort: [ 90 ]
    messageGatewayPrometheusPort: [ 90 ]
    groupPrometheusPort: [ 90 ]
    authPrometheusPort: [ 90 ]
    pushPrometheusPort: [ 90 ]
    conversationPrometheusPort: [ 90 ]
    rtcPrometheusPort: [ 90 ]
    thirdPrometheusPort: [ 90 ]
    messageTransferPrometheusPort: [ 90, 90, 90, 90 ] # List of ports
